// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(WarehouseContext))]
    partial class WarehouseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.6");

            modelBuilder.Entity("Domain.Entities.DokumentPrzyjecia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Data")
                        .HasColumnType("TEXT");

                    b.Property<int>("KontrahentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("KontrahentId");

                    b.ToTable("DokumentyPrzyjecia");
                });

            modelBuilder.Entity("Domain.Entities.Kontrahent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Kontrahenci");
                });

            modelBuilder.Entity("Domain.Entities.PozycjaDokumentu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DokumentPrzyjeciaId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Ilosc")
                        .HasColumnType("TEXT");

                    b.Property<int>("TowarId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DokumentPrzyjeciaId");

                    b.HasIndex("TowarId");

                    b.ToTable("PozycjeDokumentow");
                });

            modelBuilder.Entity("Domain.Entities.Towar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("JednostkaMiary")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NazwaTowaru")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Towar");
                });

            modelBuilder.Entity("Domain.Entities.DokumentPrzyjecia", b =>
                {
                    b.HasOne("Domain.Entities.Kontrahent", "Kontrahent")
                        .WithMany("DokumentyPrzyjecia")
                        .HasForeignKey("KontrahentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Kontrahent");
                });

            modelBuilder.Entity("Domain.Entities.PozycjaDokumentu", b =>
                {
                    b.HasOne("Domain.Entities.DokumentPrzyjecia", "DokumentPrzyjecia")
                        .WithMany("Pozycje")
                        .HasForeignKey("DokumentPrzyjeciaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Towar", "Towar")
                        .WithMany("Pozycje")
                        .HasForeignKey("TowarId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DokumentPrzyjecia");

                    b.Navigation("Towar");
                });

            modelBuilder.Entity("Domain.Entities.DokumentPrzyjecia", b =>
                {
                    b.Navigation("Pozycje");
                });

            modelBuilder.Entity("Domain.Entities.Kontrahent", b =>
                {
                    b.Navigation("DokumentyPrzyjecia");
                });

            modelBuilder.Entity("Domain.Entities.Towar", b =>
                {
                    b.Navigation("Pozycje");
                });
#pragma warning restore 612, 618
        }
    }
}
